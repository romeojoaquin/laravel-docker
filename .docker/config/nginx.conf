worker_processes  1;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr notice;

    keepalive_timeout  120;

    proxy_connect_timeout       6000;
    proxy_send_timeout          6000;
    proxy_read_timeout          6000;
    send_timeout                6000;

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        server_name _;

        sendfile off;

        index index.php index.html;
        root /var/www/html/Laravel-Front/public;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to index.php
            try_files $uri $uri/ /index.php?q=$uri&$args;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass  127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_read_timeout 6000;

            #if ($request_method = 'OPTIONS') {
            #    add_header 'Access-Control-Allow-Origin' '*';
            #    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #    #
            #    # Custom headers and headers various browsers *should* be OK with but aren't
            #    #
            #    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #    #
            #    # Tell client that this pre-flight info is valid for 20 days
            #    #
            #    add_header 'Access-Control-Max-Age' 1728000;
            #    add_header 'Content-Type' 'text/plain; charset=utf-8';
            #    add_header 'Content-Length' 0;
            #    return 204;
            #}

            #if ($request_method = 'POST') {
            #    add_header 'Access-Control-Allow-Origin' '*';
            #    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            #}

            #if ($request_method = 'GET') {
            #    add_header 'Access-Control-Allow-Origin' '*';
            #    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            #}
        }

        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
            expires 5d;
        }

        # deny access to . files, for security
        #
        location ~ /\. {
            log_not_found off;
            deny all;
        }
    }
}